

import uncertainty.Uncertainty;
import uncertainty.UncertaintyLocation;
import uncertainty.UncertaintyFactory;
import uncertainty.StochasticityEffectType;
import uncertainty.StructuralEffectTypeRepresentation;
import uncertainty.UncertaintyLocationType;

import org.eclipse.emf.ecore.util.EcoreUtil;
import brakesystem.BrakeCaliper;
import cad.Circle;
import uncertainty.UncertaintyAnnotationRepository;


import tools.vitruv.methodologisttemplate.consistency.utils.StoexConsistencyHelper;


import "http://www.example.org/uncertainty" as uncertaintyModel
import "http://www.example.org/brakesystem" as brakesystemModel



reactions: uncertainty2brakesystem
in reaction to changes in uncertaintyModel
execute actions in brakesystemModel

reaction UncertaintyEffectSpecificationReferencingBrakeCaliperChanged {
    after attribute replaced at uncertaintyModel::Effect[specification] 
    call handleBrakeCaliperUncertainty(affectedEObject, affectedEObject.eContainer() as Uncertainty)
}

routine handleBrakeCaliperUncertainty(uncertaintyModel::Effect effect, uncertaintyModel::Uncertainty uncertainty) {

    match {
        val correspondingUncertainties = retrieve many uncertaintyModel::Uncertainty corresponding to uncertainty

        check uncertainty.uncertaintyLocation.getReferencedComponents().get(0) instanceof BrakeCaliper
    }

    // Check if uncertainty qualifies
    // the uncertainty location type needs to be parameter
    // the uncertainty location specification needs to reference hydraulicPressureInBar or pistonDiameterInMM

    update {
        if (effect === null) return;
        if (effect.stochasticity !== StochasticityEffectType.PROBABILISTIC) return;
        if (effect.representation !== StructuralEffectTypeRepresentation.CONTINOUS) return;
        if(effect.getSpecification() === null) return;
        if (uncertainty.getUncertaintyLocation().getLocation() !== UncertaintyLocationType.PARAMETER) return;
        if (uncertainty.getUncertaintyLocation().getSpecification() === null) return;
        if (uncertainty.getUncertaintyLocation() === null) return;
        if (uncertainty.getUncertaintyLocation().getSpecification() === null) return;
        if (!(uncertainty.getUncertaintyLocation().getSpecification().contains("hydraulicPressureInBar")) &&
            !(uncertainty.getUncertaintyLocation().getSpecification().contains("pistonDiameterInMM"))) {
            return;
        }

        // Check that the other parameter's effect specification (stoex) is available
        
        val repository = uncertainty.eContainer as UncertaintyAnnotationRepository
        if (repository.getUncertainties.filter[u | u.getUncertaintyLocation.getSpecification == "hydraulicPressureInBar"].empty) return;
        if (repository.getUncertainties.filter[u | u.getUncertaintyLocation.getSpecification == "pistonDiameterInMM"].empty) return;

        val hydraulicPressureUncertainty = repository.getUncertainties.filter[u | u.getUncertaintyLocation.getSpecification == "hydraulicPressureInBar"].get(0);
        val pistonDiameterUncertainty = repository.getUncertainties.filter[u | u.getUncertaintyLocation.getSpecification == "pistonDiameterInMM"].get(0);
        if (hydraulicPressureUncertainty.effect === null) return;
        if (hydraulicPressureUncertainty.effect.specification === null) return;
        if (pistonDiameterUncertainty.effect === null) return;
        if (pistonDiameterUncertainty.effect.specification === null) return;
        val hydraulicPressureEffectSpec = hydraulicPressureUncertainty.effect.specification;
        val pistonDiameterEffectSpec = pistonDiameterUncertainty.effect.specification;

        val stoexConsistencyHelper = new StoexConsistencyHelper();

        stoexConsistencyHelper.putVariable("pistonDiameterInMM", pistonDiameterEffectSpec);
        stoexConsistencyHelper.putVariable("hydraulicPressureInBar", hydraulicPressureEffectSpec);
        val expression = "PI * (pistonDiameterInMM * 0.001 / 2) ^ 2 * hydraulicPressureInBar * 10 ^ 2"
        val clampingForce = stoexConsistencyHelper.evaluateExpression(expression);
        
        //
        //// Create new Uncertainty for the clamping force
        //
        
        // Create a new UncertaintyLocation
        val newUncertaintyLocation = UncertaintyFactory.eINSTANCE.createUncertaintyLocation();
        newUncertaintyLocation.getReferencedComponents().add(uncertainty.getUncertaintyLocation().getReferencedComponents().get(0));
        newUncertaintyLocation.setLocation(UncertaintyLocationType.PARAMETER);
        newUncertaintyLocation.setSpecification("clampingForceInN");
        


        val newEffect = UncertaintyFactory.eINSTANCE.createEffect();
        newEffect.setSpecification(clampingForce);
        newEffect.setRepresentation(StructuralEffectTypeRepresentation.CONTINOUS);
        newEffect.setStochasticity(StochasticityEffectType.PROBABILISTIC);

        val newPattern = UncertaintyFactory.eINSTANCE.createPattern();
        newPattern.setPatternType(uncertainty.pattern.getPatternType());

        val newPerspective = UncertaintyFactory.eINSTANCE.createUncertaintyPerspective();
        newPerspective.setPerspective(uncertainty.perspective.getPerspective());
        newPerspective.setSpecification(uncertainty.perspective.getSpecification());

        // Create a new Uncertainty
        val newUncertainty = UncertaintyFactory.eINSTANCE.createUncertainty();
        newUncertainty.setKind(uncertainty.getKind());
        newUncertainty.setReducability(uncertainty.getReducability());
        newUncertainty.setNature(uncertainty.getNature());
        newUncertainty.setUncertaintyLocation(newUncertaintyLocation);
        newUncertainty.setId(EcoreUtil.generateUUID());
        newUncertainty.setEffect(newEffect);
        newUncertainty.setPattern(newPattern);
        newUncertainty.setPerspective(newPerspective);
        newUncertainty.setOnDelete(uncertainty.getOnDelete());

        
        // Add Correspondence
        addCorrespondenceBetween(newUncertainty, uncertainty);
        val annotationRepository = uncertainty.eContainer() as UncertaintyAnnotationRepository;
        annotationRepository.getUncertainties.add(newUncertainty);

    }

}