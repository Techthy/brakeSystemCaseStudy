
import java.io.File;

import tools.vitruv.methodologisttemplate.consistency.ClampingForceHelper;


import "http://www.example.org/brakesystem" as brakesystem
import "http://www.example.org/cad" as cad
import "http://www.example.org/uncertainty" as uncertaintyModel

reactions: brakesystem2cad
in reaction to changes in brakesystem
execute actions in cad

reaction BrakesystemInsertedAsRoot {
    after element brakesystem::Brakesystem inserted as root
    call createAndRegisterRoot(newValue)
}

routine createAndRegisterRoot(brakesystem::Brakesystem repo) {
    match {
        require absence of cad::CADRepository corresponding to repo
    }
    create {
        val mCad = new cad::CADRepository
    }
    update {
        persistProjectRelative(repo, mCad, new File("").toString() + "example.cad")
        addCorrespondenceBetween(repo, mCad)
    }
}

reaction BrakeDiscInsertedIntoBrakesystem {
    after element brakesystem::BrakeDisk inserted in brakesystem::Brakesystem[BrakeComponents]
    call createAndInsertCircle(affectedEObject, newValue)
}

routine createAndInsertCircle(brakesystem::Brakesystem system, brakesystem::BrakeDisk disc) {
    match {
        require absence of cad::Circle corresponding to disc
        val mCADRepository = retrieve cad::CADRepository corresponding to system
    }
    create {
        val mCad = new cad::Circle
    }
    update {
        mCad.setRadius(disc.getDiameterInMM() / 2)
        mCADRepository.cadElements.add(mCad)
        addCorrespondenceBetween(disc, mCad)
    }
}

reaction BrakePadInsertedIntoBrakesystem {
    after element brakesystem::BrakePad inserted in brakesystem::Brakesystem[BrakeComponents]
    call createAndInsertRectangle(affectedEObject, newValue)
}

routine createAndInsertRectangle(brakesystem::Brakesystem system, brakesystem::BrakePad pad) {
    match {
        require absence of cad::Rectangle corresponding to pad
        val mCADRepository = retrieve cad::CADRepository corresponding to system
    }
    create {
        val mCad = new cad::Rectangle
    }
    update {
        mCad.setSideA(pad.getWidthInMM())
        mCad.setSideB(pad.getHeightInMM())
        mCADRepository.cadElements.add(mCad)
        addCorrespondenceBetween(pad, mCad)
    }
}

reaction BrakeDiskThicknessChanged {
    after attribute replaced at  brakesystem::BrakeDisk[brakeDiskThicknessInMM] 
    call updateCircleThickness(affectedEObject, newValue)
}

routine updateCircleThickness(brakesystem::BrakeDisk disc, Integer newThickness) {
    match {
        val mCad = retrieve cad::Circle corresponding to disc
    }
    update {
        mCad.setExtrusion(newThickness);
    }
}

reaction PistonDiameterInMMChanged {
    after attribute replaced at  brakesystem::BrakeCaliper[pistonDiameterInMM] 
    call handlePistonDiameterChange(affectedEObject)
}

routine handlePistonDiameterChange(brakesystem::BrakeCaliper caliper) {
    match {
        val repo = retrieve uncertaintyModel::UncertaintyAnnotationRepository corresponding to caliper.eContainer()
    }
    update {
        ClampingForceHelper.recomputeClampingForce(caliper, repo);
    }
}