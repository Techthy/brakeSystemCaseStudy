
import java.util.List;
import uncertainty.Uncertainty;
import uncertainty.UncertaintyLocation;
import uncertainty.UncertaintyFactory;
import uncertainty.StochasticityEffectType;
import uncertainty.StructuralEffectTypeRepresentation;
import org.eclipse.emf.ecore.util.EcoreUtil;
import brakesystem.BrakeDisk;
import uncertainty.UncertaintyKind;
import cad.Circle;
import java.util.regex.Pattern;
import java.util.regex.Matcher;


import "http://www.example.org/uncertainty" as uncertaintyModel
import "http://www.example.org/cad" as cadModel
import "http://www.example.org/brakesystem" as brakesystemModel



reactions: uncertainty2cad
in reaction to changes in uncertaintyModel
execute actions in cadModel

reaction UncertaintyLocationReferencingBrakeDiskInsertedIntoUncertainty {
    after element EObject inserted in uncertaintyModel::UncertaintyLocation[referencedComponents]
    call handleBrakeDiskUncertainty(affectedEObject, newValue)
}


routine handleBrakeDiskUncertainty(uncertaintyModel::UncertaintyLocation location, EObject referencedElement) {
    
    match {
        val correspondingReferenceList = retrieve many EObject corresponding to referencedElement
        check referencedElement instanceof BrakeDisk
    }


    update {
        // Check if uncertainty qualifies
        // needs to be a of kind belief
        // the Effect shall have specification that looks like "N=(x,y)"
        // the EffectTypes within the Effect shall include continuous and probabilistic

        val sourceUncertainty = location.eContainer() as Uncertainty;
        val effect = sourceUncertainty.effect;

		
        if (sourceUncertainty.kind !== UncertaintyKind.BELIEF_UNCERTAINTY) return;
        if (effect === null) return;
        val regex = "N=\\(\\d+,\\d+\\)";
        val pattern = Pattern.compile(regex);
		val effectSpecification = sourceUncertainty.effect.specification;
        val matcher = pattern.matcher(effectSpecification);
        if (!matcher.matches()) return;
        if (effect.stochasticity !== StochasticityEffectType.PROBABILISTIC) return;
        if (effect.representation !== StructuralEffectTypeRepresentation.CONTINOUS) return;
        // Uncertainty is valid

        // get the expectation value mu from the specification string
        val startIdx = effectSpecification.indexOf('(') + 1;
        val commaIdx = effectSpecification.indexOf(',', startIdx);
        val muStr = effectSpecification.substring(startIdx, commaIdx).trim();
        val mu = Integer.parseInt(muStr);


        for (correspondingElement : correspondingReferenceList) {
            if (correspondingElement instanceof Circle) {
                correspondingElement.setRadius(mu / 2);
            }
           
        }
    }


}