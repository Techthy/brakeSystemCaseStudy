
import java.util.List;
import uncertainty.Uncertainty;
import uncertainty.UncertaintyLocation;
import uncertainty.UncertaintyFactory;
import uncertainty.StochasticityEffectType;
import uncertainty.StructuralEffectTypeRepresentation;
import org.eclipse.emf.ecore.util.EcoreUtil;
import brakesystem.BrakeDisk;
import uncertainty.UncertaintyKind;
import cad.Circle;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import tools.vitruv.methodologisttemplate.consistency.utils.StoexConsistencyHelper;


import "http://www.example.org/uncertainty" as uncertaintyModel
import "http://www.example.org/cad" as cadModel
import "http://www.example.org/brakesystem" as brakesystemModel



reactions: uncertainty2cad
in reaction to changes in uncertaintyModel
execute actions in cadModel

reaction UncertaintyLocationReferencingBrakeDiskInsertedIntoUncertainty {
    after element EObject inserted in uncertaintyModel::UncertaintyLocation[referencedComponents]
    call handleBrakeDiskUncertainty(affectedEObject, newValue)
}


routine handleBrakeDiskUncertainty(uncertaintyModel::UncertaintyLocation location, EObject referencedElement) {
    
    match {
        val correspondingReferenceList = retrieve many EObject corresponding to referencedElement
        check referencedElement instanceof BrakeDisk
    }


    update {
        System.out.println("-=-=-=- Handling uncertainty for BrakeDisk");

        // Check if uncertainty qualifies
        // needs to be a of kind belief
        // the Effect shall have specification that looks like "N=(x,y)"
        // the EffectTypes within the Effect shall include continuous and probabilistic

        val sourceUncertainty = location.eContainer() as Uncertainty;
        val effect = sourceUncertainty.effect;

		
        //if (effect === null) return;
        if (effect.stochasticity !== StochasticityEffectType.PROBABILISTIC) return;
        if (effect.representation !== StructuralEffectTypeRepresentation.CONTINOUS) return;


        // TODO: evaluate String with stoex

        System.out.println("xxxx Effect specification: " + effect.getSpecification());
        val stoexConsistencyHelper = new StoexConsistencyHelper();
        val expression = effect.getSpecification() + " + Normal(0.0, 1.0)";
        System.out.println("xxxx Effect specification: " + effect.getSpecification());
        val result = stoexConsistencyHelper.evaluateExpression(expression);

        System.out.println("Evaluated expression: " + expression);
        System.out.println("Evaluation result: " + result);

    }


}